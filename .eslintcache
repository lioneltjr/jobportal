[{"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\index.js":"1","C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\App.js":"2","C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\reportWebVitals.js":"3","C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\homepage\\Home.js":"4","C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\JobListing.js":"5","C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\individualjobpage\\IndividualJobPage.js":"6","C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\PostReviewPage.js":"7","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\index.js":"8","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\App.js":"9","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\reportWebVitals.js":"10","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\PostReviewPage.js":"11","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\homepage\\Home.js":"12","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\individualjobpage\\IndividualJobPage.js":"13","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\JobListing.js":"14","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\Login.js":"15","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\UserProfile.js":"16","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\Navigation.js":"17","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\Postjob.js":"18","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\Register.js":"19"},{"size":500,"mtime":499162500000,"results":"20","hashOfConfig":"21"},{"size":776,"mtime":1611286028212,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":262,"mtime":1611205364334,"results":"24","hashOfConfig":"21"},{"size":1941,"mtime":1611301243184,"results":"25","hashOfConfig":"21"},{"size":5069,"mtime":1611286043373,"results":"26","hashOfConfig":"21"},{"size":3738,"mtime":1611301186069,"results":"27","hashOfConfig":"21"},{"size":517,"mtime":1611305631481,"results":"28","hashOfConfig":"29"},{"size":1314,"mtime":1611333018783,"results":"30","hashOfConfig":"29"},{"size":375,"mtime":1611305631481,"results":"31","hashOfConfig":"29"},{"size":3937,"mtime":1611332059778,"results":"32","hashOfConfig":"29"},{"size":467,"mtime":1611316176371,"results":"33","hashOfConfig":"29"},{"size":5767,"mtime":1611323158609,"results":"34","hashOfConfig":"29"},{"size":4101,"mtime":1611331601294,"results":"35","hashOfConfig":"29"},{"size":2233,"mtime":1611307533479,"results":"36","hashOfConfig":"29"},{"size":6962,"mtime":1611318627575,"results":"37","hashOfConfig":"29"},{"size":1478,"mtime":1611317115828,"results":"38","hashOfConfig":"29"},{"size":4878,"mtime":1611311702732,"results":"39","hashOfConfig":"29"},{"size":7477,"mtime":1611339961149,"results":"40","hashOfConfig":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1lejc9v",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1grmqt2",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\index.js",[],["85","86"],"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\App.js",[],"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\reportWebVitals.js",[],"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\homepage\\Home.js",[],"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\JobListing.js",["87"],"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\individualjobpage\\IndividualJobPage.js",[],"C:\\Users\\ASUS\\Documents\\dev\\jobportal\\src\\components\\PostReviewPage.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\index.js",[],["88","89"],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\App.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\reportWebVitals.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\PostReviewPage.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\homepage\\Home.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\individualjobpage\\IndividualJobPage.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\JobListing.js",["90","91","92"],"import React, { Fragment } from 'react'\r\nimport { Button, Table, Card } from 'react-bootstrap';\r\nimport { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './css/joblisting.css';\r\nimport { Route } from 'react-router-dom'\r\n\r\nexport default function JobListing(props) {\r\n\r\n    const [jobs, setJobs] = useState([]);\r\n\r\n\r\n    //function to get all the job listings in the database\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8080/jobs/status/NotCompleted').then(res => {\r\n            console.log(res.data);\r\n            setJobs(res.data);\r\n        }).catch(error => {\r\n            console.log(error.response)\r\n            alert(JSON.stringify(error.response.data));\r\n        });\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    return <Fragment>\r\n        <div id=\"mylistingpage\">\r\n        {jobs.map(data => {\r\n            return <Card id=\"myjoblistingcard\" style={{ width: '30em'}}>\r\n                <Card.Img variant=\"top\" src=\"https://images.indianexpress.com/2020/03/dog-1-2.jpg\" />\r\n                <Card.Body>\r\n\r\n                    <div>\r\n                        <Card.Title>{data.name}</Card.Title>\r\n                        <footer className=\"blockquote-footer\">\r\n                            Posted by <cite title=\"test\">{data.postedBy}</cite>\r\n                        </footer>\r\n                        <Card.Body>\r\n                        </Card.Body>\r\n                        <Route render={({ history }) => (\r\n                            <Button variant=\"secondary\" id=\"myviewmorebtn\" type='button' onClick={() => { history.push('/jobs/' + data.id, { id: data.id }) }}> View\r\n                            </Button>\r\n                        )} />\r\n                    </div>\r\n                \r\n            </Card.Body>\r\n            </Card>\r\n            })}\r\n            </div>\r\n            {/* <Table striped hover bordered>\r\n            <thead>\r\n                <tr>\r\n                    <th>Job Name</th>\r\n                    <th>Posted By</th>\r\n                    <th>Reward</th>\r\n                    <th>Chat</th>\r\n                    <th>Apply</th>\r\n                </tr>\r\n            </thead>\r\n            {jobs.map(jobs => {\r\n                return <tbody><tr>\r\n                    <td>{jobs.name}</td>\r\n                    <td>{jobs.postedBy}</td>\r\n                    <td>{jobs.price}</td>\r\n                    <td><Button>Chat</Button></td>\r\n                    <td><Route render={({ history }) => (\r\n                        <Button\r\n                            type='button'\r\n                            onClick={() => {\r\n                                history.push('/jobs/' + jobs.id, {\r\n                                    id: jobs.id,\r\n                                })\r\n                            }}\r\n                        >\r\n                            Apply\r\n                        </Button>\r\n                    )} /></td>\r\n                </tr></tbody>\r\n            })}\r\n        </Table> */}\r\n    </Fragment>\r\n\r\n\r\n    {/* <Table striped hover bordered>\r\n            <thead>\r\n                <tr>\r\n                    <th>Job Name</th>\r\n                    <th>Posted By</th>\r\n                    <th>Reward</th>\r\n                    <th>Chat</th>\r\n                    <th>Apply</th>\r\n                </tr>\r\n            </thead>\r\n            {jobs.map(jobs => {\r\n                return <tbody><tr>\r\n                    <td>{jobs.name}</td>\r\n                    <td>{jobs.postedBy}</td>\r\n                    <td>{jobs.price}</td>\r\n                    <td><Button>Chat</Button></td>\r\n                    <td><Route render={({ history }) => (\r\n                        <Button\r\n                            type='button'\r\n                            onClick={() => {\r\n                                history.push('/jobs/' + jobs.id, {\r\n                                    id: jobs.id,\r\n                                })\r\n                            }}\r\n                        >\r\n                            Apply\r\n                        </Button>\r\n                    )} /></td>\r\n                </tr></tbody>\r\n            })}\r\n        </Table> */}\r\n\r\n\r\n}\r\n","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\Login.js",[],"C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\UserProfile.js",["93"],"import { Button, Card, Form, Table, Tabs } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from 'react';\r\nimport {  Tab } from 'bootstrap';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { Link } from 'react-router-dom';\r\nfunction UserProfile()\r\n{\r\n    const [id, setId] = useState('');\r\n  const [Jobs, setJobs] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  \r\n  const [update, setUpdate] = useState(true);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:8080/jobs').then(res => {\r\n      console.log(res.data);\r\n      setJobs(res.data);\r\n    })\r\n\r\n  }, []);\r\n\r\n\r\n\r\n\r\n    const updateJobs = (event) => {\r\n        event.preventDefault();\r\n        \r\n          axios\r\n            .put(\"http://localhost:8080/jobs/\" + id, \r\n            {\r\n                id:id,\r\n                name: name,\r\n                description: description,\r\n                date: date,\r\n                price: price,\r\n                address: address,\r\n              \r\n            })\r\n            .then((res) => {\r\n                window.location.reload(false);\r\n                alert(JSON.stringify(res.data));\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n     \r\n    \r\n      const deleteJobs = (event) => {\r\n       let element = event.currentTarget;\r\n       console.log(element.id);\r\n          axios\r\n            .delete(\"http://localhost:8080/jobs/\" + element.id)\r\n            .then((res) => {\r\n                if (res.status === 204) {\r\n                    console.log('Deleting!');\r\n                    element.parentNode.parentNode.remove();\r\n                   alert(\"Job Deleted\")\r\n                  }\r\n              console.log(res.data);\r\n             \r\n              setUpdate(!update);\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n     \r\n                  \r\n     \r\n    return(\r\n        \r\n        <Tabs defaultActiveKey=\"myJobs\" id=\"uncontrolled-tab-example\">    \r\n      \r\n          <Tab eventKey=\"myJobs\" Task=\"My Jobs\" title = \"Current JobListing\">\r\n            <h1 className=\"m-5\">My Jobs</h1>\r\n            <div className=\"mx-5\">\r\n              <Table striped bordered hover variant=\"outlined-light\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Id</th>\r\n                    <th>Task</th>\r\n                    <th>Desc</th>\r\n                    <th>Date</th>\r\n                    <th>Servicecharge</th>\r\n                    <th>Address</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n            {\r\n                    Jobs.map((element) => {\r\n                   \r\n                        return  <tr key={element.id} id = {element.id}> \r\n                            <td>{element.id}</td>\r\n                            <td>{element.name}</td>\r\n                            <td>{element.description}</td>\r\n                            <td>{element.date}</td>\r\n                            <td>{element.price}</td>\r\n                            <td>{element.address}</td>\r\n                            <td>\r\n                              <Button\r\n                                variant=\"outline-warning\"\r\n                                // onClick={ } \r\n                              >\r\n                                Edit\r\n                              </Button>\r\n                            </td>\r\n                            <td>\r\n                              <Button\r\n                                variant=\"outline-danger\" id = {element.id}\r\n                                onClick={(event) => deleteJobs(event)}\r\n                              >\r\n                                Delete\r\n                              </Button>\r\n                            </td>\r\n                          </tr>\r\n                        \r\n                      }\r\n                    )}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          </Tab>\r\n         \r\n          <Tab\r\n            eventKey=\"editjob\" title = \"Edit job\">\r\n            <h1 className=\"m-5\">Edit Job information</h1>\r\n            <div className=\"form-popup\" id={\"myForm\"}>\r\n            {/* <div className=\"mx-5\"> */}\r\n            <Card className=\"bg-light mx-auto\" style={{ width: \"30rem\" }}>\r\n              <Card.Header>Edit Job information</Card.Header>\r\n        \r\n              <Form\r\n                className=\"m-3\"\r\n              >\r\n                  <Form.Group controlId=\"Task\">\r\n                  <Form.Label>Id</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={id}\r\n                    onChange={(event) => setId(event.target.value)}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"Task\">\r\n                  <Form.Label>Task</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={name}\r\n                    onChange={(event) => setName(event.target.value)}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Desc\">\r\n                  <Form.Label>Description</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={description}\r\n                    onChange={(event) => setDescription(event.target.value)}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Date\">\r\n                  <Form.Label>Date</Form.Label>\r\n                  <Form.Control\r\n                    type=\"date\"\r\n                    value={date}\r\n                    onChange={(event) => setDate(event.target.value)}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Servicecharge\">\r\n                  <Form.Label>Servicecharge</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={price}\r\n                    onChange={(event) => setPrice(event.target.value)}\r\n                  />\r\n                </Form.Group> \r\n                <Form.Group controlId=\"Address\">\r\n                  <Form.Label>Address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={address}\r\n                    onChange={(event) => setAddress(event.target.value)}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"submit\" onClick={(event) => updateJobs(event)}>\r\n                  Update\r\n                </Button>\r\n              </Form>\r\n            </Card>\r\n            </div>\r\n          </Tab>\r\n      \r\n      </Tabs>\r\n    )\r\n}\r\nexport default UserProfile;","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\Navigation.js",["94","95"],"import React, { Fragment } from 'react'\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap'\r\n\r\nexport default function Navigation() {\r\n    return <Fragment>\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">My Handy Job</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"#link\">Post a Job</Nav.Link>\r\n                    <NavDropdown title=\"My Account\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"#action/3.1\">Job Records</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.2\">Alerts</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.3\">Messages</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                {/* <Form inline>\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"  />\r\n                </Form> */}\r\n                <div id=\"logoutbtn\"><Button variant=\"light\">Logout</Button> </div>\r\n            </Navbar.Collapse>\r\n            \r\n        </Navbar>\r\n    </Fragment>\r\n}","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\components\\Postjob.js",["96"],"import { useEffect, useState } from \"react\";\r\nimport { Button, Tabs, Tab,  Form, Card } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport axios from \"axios\";\r\nfunction Postjob() \r\n{\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [Jobs, setJobs] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    axios\r\n      .get(\"http://localhost:8080/jobs\")\r\n      .then((res) => {\r\n        setJobs(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  //This is how we created the createBooks function!\r\n  const createJobs = (event) => {\r\n    event.preventDefault();\r\n    // if (localStorage.getItem(\"token\"))  {\r\n    console.log(event);\r\n    console.log(\"Name\", name);\r\n    console.log(\"description\", description);\r\n    console.log(\"date\", date);\r\n    console.log(\"price\", price);\r\n    console.log(\"address\", address);\r\n \r\n\r\n        axios.post(\"http://localhost:8080/jobs\", {\r\n           name: name,\r\n           description: description,\r\n           date: date,\r\n           price: price,\r\n           address: address,\r\n          \r\n          }\r\n          )\r\n          .then((res) => {\r\n            console.log(res.data);\r\n          })\r\n          .catch((err) => console.log(err));\r\n      //}\r\n    }\r\n    \r\n\r\n\r\n    return(\r\n    \r\n            <div className=\"App mt-5\">\r\n           \r\n              <Tabs defaultActiveKey=\"addjobs\" id=\"uncontrolled-tab-example\">\r\n               \r\n             \r\n                  <Tab eventKey=\"addjobs\" name=\"Add Jobs\">\r\n                    <h1 className=\"m-5\">Add Jobs</h1>\r\n        \r\n                 \r\n                    <Card className=\"bg-light mx-auto\" style={{ width: \"30rem\" }}>\r\n                      <Card.Header>Add Jobs</Card.Header>\r\n        \r\n                   \r\n                      <Form onSubmit={(event) => createJobs(event)} className=\"m-3\">\r\n                        <Form.Group controlId=\"name\">\r\n                          <Form.Label>Task</Form.Label>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Provide task\"\r\n                            value={name}\r\n                            onChange={(event) => setName(event.target.value)}\r\n                          />\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group controlId=\"description\">\r\n                          <Form.Label>description</Form.Label>\r\n                          <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"Provide description\"\r\n                            value={description}\r\n                            onChange={(event) => setDescription(event.target.value)}\r\n                          />\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group controlId=\"date\">\r\n                          <Form.Label>date</Form.Label>\r\n                          <Form.Control\r\n                             type=\"date\"\r\n                             placeholder=\"Provide date\"\r\n                            value={date}\r\n                            onChange={(e) => setDate(e.target.value)}\r\n                          >\r\n                          </Form.Control>\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group controlId=\"price\">\r\n                          <Form.Label>price</Form.Label>\r\n                          <Form.Control\r\n                           type=\"text\"\r\n                           placeholder=\"Provide Service charge\"\r\n                            value={price}\r\n                            onChange={(e) => setPrice(e.target.value)}\r\n                          >\r\n                            \r\n                          </Form.Control>\r\n                        </Form.Group>\r\n        \r\n                        <Form.Group controlId=\"address\">\r\n                          <Form.Label>address</Form.Label>\r\n                          <Form.Control\r\n                           type=\"text\"\r\n                           placeholder=\"Provide address charge\"\r\n                            value={address}\r\n                            onChange={(e) => setAddress(e.target.value)}\r\n                          >\r\n                            \r\n                          </Form.Control>\r\n                        </Form.Group>\r\n                        \r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                          Add\r\n                        </Button>\r\n                      </Form>\r\n                    </Card>\r\n                  </Tab>\r\n             \r\n        \r\n              \r\n               \r\n              </Tabs>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Postjob;","C:\\Users\\ASUS\\Desktop\\test\\jobportal\\src\\Register.js",["97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":25},{"ruleId":"98","replacedBy":"106"},{"ruleId":"100","replacedBy":"107"},{"ruleId":"102","severity":1,"message":"108","line":2,"column":18,"nodeType":"104","messageId":"105","endLine":2,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":85,"column":5,"nodeType":"111","messageId":"112","endLine":115,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":85,"column":5,"nodeType":"111","messageId":"115","endLine":115,"endColumn":21},{"ruleId":"102","severity":1,"message":"116","line":7,"column":10,"nodeType":"104","messageId":"105","endLine":7,"endColumn":14},{"ruleId":"102","severity":1,"message":"117","line":2,"column":36,"nodeType":"104","messageId":"105","endLine":2,"endColumn":40},{"ruleId":"102","severity":1,"message":"118","line":2,"column":42,"nodeType":"104","messageId":"105","endLine":2,"endColumn":53},{"ruleId":"102","severity":1,"message":"119","line":13,"column":10,"nodeType":"104","messageId":"105","endLine":13,"endColumn":14},{"ruleId":"102","severity":1,"message":"120","line":18,"column":12,"nodeType":"104","messageId":"105","endLine":18,"endColumn":16},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'IndividualJobPage' is defined but never used.","Identifier","unusedVar",["121"],["122"],"'Table' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'Link' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'Jobs' is assigned a value but never used.","'User' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]